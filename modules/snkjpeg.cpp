#include "snkjpeg.h"

void snkjpeg::wb(int j) {
  /* printf("write byte %d\n", j); */
  fprintf(jpegfile, "%c", j);
}

void snkjpeg::ww(int j) {
  wb(j>>8);
  wb(j);
}

void snkjpeg::store_bits(int bb) {
  unsigned char t;

  t = bb>>24;
  wb(t);
  if (t == 0xff) wb(0);;

  t = bb>>16;
  wb(t);
  if (t == 0xff) wb(0);

  t = bb>>8;
  wb(t);
  if (t == 0xff) wb(0);

  t = bb;
  wb(t);
  if (t == 0xff) wb(0);
}

void snkjpeg::process() {
	unsigned int   bb;
	unsigned int   nbb;
	int qv, i;
	int _bits;
	int _n;

	int ldhtftab[] = {
	  28,
	  0x0,0x1,0x5,0x1,0x1,0x1,0x1,0x1,
	  0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	  0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,
	  0x8,0x9,0xa,0xb};
	int lahtftab[] = {
	  178,
	  0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d,
	  0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
	  0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
	  0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
	  0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
	  0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
	  0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
	  0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
	  0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
	  0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
	  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
	  0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
	  0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
	  0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
	  0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
	  0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
	  0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
	  0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
	  0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
	  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
	  0xf9, 0xfa
	};

    if (jpegfile==NULL) return; //normally this code cannot be reached

    bb      = 0; /* bitbuffer */
    nbb     = 0;

// JFIF File format header
    ww(0xffd8); // SOI
    ww(0xffe0); // APP0
    ww(0x0010); // Length
    ww(0x4a46); // standard APP0 marker
    ww(0x4946); // standard APPO marker
    ww(0x0001); // stadard APPO marker + version
    ww(0x0100); // version, density units
    ww(0x0001); // Xdensity
    ww(0x0001); // Ydensity
    ww(0x0000); // thumbnail

    ww(0xffdb); // quantization table
    ww(0x0043);
    wb(0x00);   // table #0; luminance
    for (qv=0; qv<64; ++qv) {
//    	wb(stdlqt[zigzag_order[qv]]);
// output quantization table in zigzag scan order
    	}

// Frame header
	ww(0xffc0); // SOF
	ww(0x0011); // Frame Header Length - is this correct?
	wb(0x08);   // sample precision
//	ww(sizey);  // y size - size have to be passed
//	ww(sizex);	//x size - size has to be passed
	wb(0x01);   // 1 component
	wb(0x01); wb(0x21); wb(0x00); // comp0, step x;y 2;1 , qtab #0

// HUFFMAN TABLE DC # 0
	ww(0xffc4);
	ww(3 + ldhtftab[0]);
	wb(0x00);
	for (i=0; i<ldhtftab[0]; i++)
		wb(ldhtftab[i+1]);

// HUFFMAN TABLE AC # 0
	ww(0xffc4);
	ww(3 + lahtftab[0]);
	wb(0x10);
	for (i=0; i<lahtftab[0]; i++)
		wb(lahtftab[i+1]);

	ww(0xffda); // SOS
	ww(0x000c);
	wb(0x01);   // components
	ww(0x0100); // comp 0 - huffman table sel
	ww(0x003f); // fixed for baseline jpeg
	wb(0x00);

	while (true) { // termination condition is not determined to be solved
	    _n    = inbits.read();
	    _bits = input.read();
	    nbb += _n;
	    if (nbb > 32)  {
	      unsigned int extra = nbb - 32;
	      bb |= (unsigned int)_bits >> extra;
	      store_bits(bb);
	      bb = (unsigned int)_bits << (32 - extra);
	      nbb = extra;
	    } else {
	      bb |= (unsigned int)_bits << (32 - nbb);
	    }
	  }
	 unsigned char t;

	  if (nbb > 0) {
	    t = bb>>24;
	    wb(t);
	    if (t == 0xff) wb(0);;
	  }

	  if (nbb > 8) {
	    t = bb>>16;
	    wb(t);
	    if (t == 0xff) wb(0);
	  }

	  if (nbb > 16) {
	    t = bb>>8;
	    wb(t);
	    if (t == 0xff) wb(0);
	  }

	  if (nbb > 24) {
	    t = bb;
	    wb(t);
	    if (t == 0xff) wb(0);
	  }
	  ww(0xffd9);

//	width = parameters.read();
//	height = parameters.read();
//	max_grey_value = parameters.read();
//	count = 0;
//   	for (unsigned i=0; i< (width*height); i++) {
//		}
//	}
//	sc_stop(); // keep stop condition??
}

